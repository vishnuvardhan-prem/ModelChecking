MODULE sensor(worldval) --The sensor module can add faults to the readings from the world module as well as pass the hardware flags of the sensor

DEFINE 
    maxsensorval:=3;
    minsensorval:=0;

    sensorval:=case
                    (worldval+noise) < minsensorval:minsensorval;
                    (worldval+noise) > maxsensorval:maxsensorval;
                    TRUE: worldval+noise;
                    esac;
VAR
    noise:-1..1;
    hwerrorflag:boolean; --Used as the hardware error flag on each sensor, FALSE-No error TRUE-error

ASSIGN
    init(noise):=0;
    init(hwerrorflag):=FALSE;

MODULE sensorvoter(sv0,hw0_error,sv1,hw1_error,sv2,hw2_error)

VAR
    op_miscompare_pcount_01:0..4; --Persistence counter for pairs that cross the threshold for difference
    op_miscompare_pcount_12:0..4;
    op_miscompare_pcount_20:0..4;
    --a seperate threshold for 2 sensors,keep it around 10 

    hw_error_pcount: array 0..2 of 0..3; --A count of the number of cyclces for which a sensor is failing
    
    sensor_valid: array 0..2 of boolean; --To keep track of failed sensors 
    
    -- num_sensor_valid:0..3; --The number of valid sensors available
    
    
    -- outputvalid:boolean;

DEFINE 
    deviation_threshold:=2;
    deviation_persistence_threshold:=4;
    hw_persistence_threshold:=3;

    miscompare_01:= (abs((sv0)-(sv1)) > deviation_threshold);
    miscompare_12:= (abs((sv1)-(sv2)) > deviation_threshold);
    miscompare_20:= (abs((sv2)-(sv0)) > deviation_threshold);
    
    num_sensor_valid:=case
                    (sensor_valid[0]=TRUE)&(sensor_valid[1]=TRUE)&(sensor_valid[2]=TRUE):3;
                    (sensor_valid[0]=FALSE)&(sensor_valid[1]=TRUE)&(sensor_valid[2]=TRUE):2;
                    (sensor_valid[0]=TRUE)&(sensor_valid[1]=FALSE)&(sensor_valid[2]=TRUE):2;
                    (sensor_valid[0]=TRUE)&(sensor_valid[1]=TRUE)&(sensor_valid[2]=FALSE):2;
                    (sensor_valid[0]=TRUE)&(sensor_valid[1]=FALSE)&(sensor_valid[2]=FALSE):1;
                    (sensor_valid[0]=FALSE)&(sensor_valid[1]=TRUE)&(sensor_valid[2]=FALSE):1;
                    (sensor_valid[0]=FALSE)&(sensor_valid[1]=FALSE)&(sensor_valid[2]=TRUE):1;
                    (sensor_valid[0]=FALSE)&(sensor_valid[1]=FALSE)&(sensor_valid[2]=FALSE):0;
                   esac;

    numfaulty:= 3- num_sensor_valid;
    
    outputvalid:=case
                    (num_sensor_valid=0):FALSE;
                    (num_sensor_valid=2)&(sensor_valid[0]=FALSE)&(miscompare_12):FALSE;
                    (num_sensor_valid=2)&(sensor_valid[1]=FALSE)&(miscompare_20):FALSE;
                    (num_sensor_valid=2)&(sensor_valid[2]=FALSE)&(miscompare_01):FALSE;
                    (num_sensor_valid=3)&(miscompare_01)&(miscompare_12)&(miscompare_20):FALSE;
                    TRUE:TRUE;
                    esac;

    op_value:= case
        (num_sensor_valid=3)&(outputvalid=FALSE):(sv0+sv1+sv2)/3;
        (num_sensor_valid=3)&(miscompare_01)&(miscompare_20):(sv0+2*sv1+2*sv2)/5;
        (num_sensor_valid=3)&(miscompare_01)&(miscompare_12):(2*sv0+sv1+2*sv2)/5;
        (num_sensor_valid=3)&(miscompare_20)&(miscompare_12):(2*sv0+2*sv1+sv2)/5;
        (num_sensor_valid=2)&(sensor_valid[0]=FALSE):(sv1+sv2)/2;
        (num_sensor_valid=2)&(sensor_valid[1]=FALSE):(sv0+sv2)/2;
        (num_sensor_valid=2)&(sensor_valid[2]=FALSE):(sv0+sv1)/2;
        (num_sensor_valid=1)&(sensor_valid[0]=TRUE):sv0;
        (num_sensor_valid=1)&(sensor_valid[1]=TRUE):sv1;
        (num_sensor_valid=1)&(sensor_valid[2]=TRUE):sv2;
        TRUE:(sv0+sv1+sv2)/3;
        esac;

INIT 
    sensor_valid[0]=TRUE
    & sensor_valid[1]=TRUE
    & sensor_valid[2]=TRUE

    & op_miscompare_pcount_01=0
    & op_miscompare_pcount_12=0
    & op_miscompare_pcount_20=0

    & hw_error_pcount[0]=0
    & hw_error_pcount[1]=0
    & hw_error_pcount[2]=0


ASSIGN
    next(op_miscompare_pcount_01):=case
                (!miscompare_01)&(op_miscompare_pcount_01>0):op_miscompare_pcount_01 -1;
                (miscompare_01)&(op_miscompare_pcount_01<deviation_persistence_threshold):op_miscompare_pcount_01 +1;
                TRUE:op_miscompare_pcount_01;
                esac;

    next(op_miscompare_pcount_12):=case
                (!miscompare_12)&(op_miscompare_pcount_12>0):op_miscompare_pcount_12 -1;
                (miscompare_12)&(op_miscompare_pcount_12<deviation_persistence_threshold):op_miscompare_pcount_12 +1;
                TRUE:op_miscompare_pcount_12;
                esac;

    next(op_miscompare_pcount_20):=case
                (!miscompare_20)&(op_miscompare_pcount_20>0):op_miscompare_pcount_20 -1;
                (miscompare_20)&(op_miscompare_pcount_20<deviation_persistence_threshold):op_miscompare_pcount_20+1; 
                TRUE:op_miscompare_pcount_20;
                esac;
    
    next(hw_error_pcount[0]):=case
                (hw0_error=TRUE)&(hw_error_pcount[0]<hw_persistence_threshold):hw_error_pcount[0]+1;
                (hw0_error=FALSE)&(hw_error_pcount[0]!=hw_persistence_threshold):0;
                TRUE:hw_persistence_threshold;
                esac;

    next(hw_error_pcount[1]):=case
                (hw1_error=TRUE)&(hw_error_pcount[1]<hw_persistence_threshold):hw_error_pcount[1]+1;
                (hw1_error=FALSE)&(hw_error_pcount[1]!=hw_persistence_threshold):0;
                TRUE:hw_persistence_threshold;
                esac;
    
    next(hw_error_pcount[2]):=case
                (hw2_error=TRUE)&(hw_error_pcount[2]<hw_persistence_threshold):hw_error_pcount[2]+1;
                (hw2_error=FALSE)&(hw_error_pcount[2]!=hw_persistence_threshold):0;
                TRUE:hw_persistence_threshold;
                esac;

    next(sensor_valid[0]):=case 
                (op_miscompare_pcount_01=deviation_persistence_threshold)&(op_miscompare_pcount_20=deviation_persistence_threshold)&(op_miscompare_pcount_12 <deviation_persistence_threshold)&(num_sensor_valid=3):FALSE;
                (hw_error_pcount[0]=hw_persistence_threshold):FALSE;
                TRUE:sensor_valid[0];
                esac;
    
    next(sensor_valid[1]):=case 
                (op_miscompare_pcount_12=deviation_persistence_threshold)&(op_miscompare_pcount_01=deviation_persistence_threshold)&(op_miscompare_pcount_20 < deviation_persistence_threshold)&(num_sensor_valid=3):FALSE;
                (hw_error_pcount[1]=hw_persistence_threshold):FALSE;
                TRUE:sensor_valid[1];
                esac;
    
    next(sensor_valid[2]):=case 
                (op_miscompare_pcount_20=deviation_persistence_threshold)&(op_miscompare_pcount_12=deviation_persistence_threshold)&(op_miscompare_pcount_01 < deviation_persistence_threshold)&(num_sensor_valid=3):FALSE;
                (hw_error_pcount[2]=hw_persistence_threshold):FALSE;
                TRUE:sensor_valid[2];
                esac;
    
INVAR
    !((hw0_error & hw1_error)|(hw0_error & hw2_error)|(hw2_error & hw1_error))

MODULE main

VAR
    worldreading: 0..3; --Values from the world
    
    sensormodule1:sensor(worldreading);

    sensormodule2:sensor(worldreading);

    sensormodule3:sensor(worldreading);

    votermodule:sensorvoter(sensormodule1.sensorval,sensormodule1.hwerrorflag,sensormodule2.sensorval,sensormodule2.hwerrorflag,sensormodule3.sensorval,sensormodule3.hwerrorflag);

ASSIGN
    init(worldreading):=0;

-- SPEC


    -- Once a sensor fails, isolation is final.
    -- AG(votermodule.num_sensor_valid=2 -> !(EF(votermodule.num_sensor_valid=3)))

    -- Once 2 sensors fails, isolation is final.
    -- AG(votermodule.num_sensor_valid=1 -> !(EF(votermodule.num_sensor_valid=2)))

    -- No recovery from all failed sensors.
    -- AG(votermodule.num_sensor_valid=0 -> !(EF(votermodule.num_sensor_valid=1)))


    -- EF(A[(votermodule.num_sensor_valid=2 & votermodule.outputvalid=TRUE)U(votermodule.num_sensor_valid=2 & votermodule.outputvalid=FALSE)]) & EF(A[(votermodule.num_sensor_valid=2 & votermodule.outputvalid=FALSE)U(votermodule.num_sensor_valid=2 & votermodule.outputvalid=TRUE)]) check

    -- 2 miscomparing sensors to 1 valid sensor 
    -- EF(A[(votermodule.num_sensor_valid=2 & votermodule.outputvalid=FALSE) U (votermodule.num_sensor_valid=1 & votermodule.outputvalid=TRUE)])

    -- 3 valid sensors,first sensor failure, 2 sensors valid
    -- AG((votermodule.num_sensor_valid=2 & votermodule.outputvalid=FALSE)-> EF(votermodule.num_sensor_valid=2 & votermodule.outputvalid=TRUE))

    

    -- AG((votermodule.num_sensor_valid=2 & votermodule.outputvalid=FALSE)-> EF(votermodule.num_sensor_valid=1 & votermodule.outputvalid= TRUE)) Need to check this...

